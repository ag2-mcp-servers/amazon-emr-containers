# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:23:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, constr


class ACMCertArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):acm:.+:(\d{12}):certificate/.+$',
            min_length=44,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):acm:.+:(\d{12}):certificate/.+$',
        min_length=44,
        max_length=2048,
    )


class Base64Encoded(
    RootModel[
        constr(
            pattern=r'^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$',
            max_length=5000,
        )
    ]
):
    root: constr(
        pattern=r'^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$',
        max_length=5000,
    )


class CancelJobRunRequest(BaseModel):
    pass


class Certificate(BaseModel):
    certificateArn: Optional[ACMCertArn] = None
    certificateData: Optional[Base64Encoded] = None


class ClientToken(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=64)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=64)


class ClusterId(
    RootModel[
        constr(pattern=r'^[0-9A-Za-z][A-Za-z0-9\-_]*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'^[0-9A-Za-z][A-Za-z0-9\-_]*', min_length=1, max_length=100)


class ContainerProviderType(Enum):
    EKS = 'EKS'


class Date(RootModel[datetime]):
    root: datetime


class DeleteJobTemplateRequest(BaseModel):
    pass


class DeleteManagedEndpointRequest(BaseModel):
    pass


class DeleteVirtualClusterRequest(BaseModel):
    pass


class DescribeJobRunRequest(BaseModel):
    pass


class DescribeJobTemplateRequest(BaseModel):
    pass


class DescribeManagedEndpointRequest(BaseModel):
    pass


class DescribeVirtualClusterRequest(BaseModel):
    pass


class EndpointArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/endpoints\/[0-9a-zA-Z]+$',
            min_length=60,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/endpoints\/[0-9a-zA-Z]+$',
        min_length=60,
        max_length=1024,
    )


class EndpointState(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    TERMINATING = 'TERMINATING'
    TERMINATED = 'TERMINATED'
    TERMINATED_WITH_ERRORS = 'TERMINATED_WITH_ERRORS'


class EndpointStates(RootModel[List[EndpointState]]):
    root: List[EndpointState] = Field(..., max_length=10)


class EndpointType(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=64)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=64)


class EndpointTypes(RootModel[List[EndpointType]]):
    root: List[EndpointType] = Field(..., max_length=10)


class EntryPointArgument(RootModel[SecretStr]):
    root: SecretStr


class EntryPointArguments(RootModel[List[EntryPointArgument]]):
    root: List[EntryPointArgument]


class EntryPointPath(RootModel[SecretStr]):
    root: SecretStr


class FailureReason(Enum):
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    USER_ERROR = 'USER_ERROR'
    VALIDATION_ERROR = 'VALIDATION_ERROR'
    CLUSTER_UNAVAILABLE = 'CLUSTER_UNAVAILABLE'


class IAMRoleArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$',
        min_length=20,
        max_length=2048,
    )


class InternalServerException(RootModel[Any]):
    root: Any


class JavaInteger(RootModel[int]):
    root: int


class JobArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/jobruns\/[0-9a-zA-Z]+$',
            min_length=60,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/jobruns\/[0-9a-zA-Z]+$',
        min_length=60,
        max_length=1024,
    )


class JobRunState(Enum):
    PENDING = 'PENDING'
    SUBMITTED = 'SUBMITTED'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    CANCEL_PENDING = 'CANCEL_PENDING'
    COMPLETED = 'COMPLETED'


class JobRunStates(RootModel[List[JobRunState]]):
    root: List[JobRunState] = Field(..., max_length=10)


class JobTemplateArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/jobtemplates\/[0-9a-zA-Z]+$',
            min_length=60,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/jobtemplates\/[0-9a-zA-Z]+$',
        min_length=60,
        max_length=1024,
    )


class KmsKeyArn(
    RootModel[
        constr(
            pattern=r'^(arn:(aws[a-zA-Z0-9-]*):kms:([a-zA-Z0-9]+-?)+:(\d{12})?:key\/[(0-9a-zA-Z)-?]+|\$\{[a-zA-Z]\w*\})$',
            min_length=3,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^(arn:(aws[a-zA-Z0-9-]*):kms:([a-zA-Z0-9]+-?)+:(\d{12})?:key\/[(0-9a-zA-Z)-?]+|\$\{[a-zA-Z]\w*\})$',
        min_length=3,
        max_length=2048,
    )


class KubernetesNamespace(
    RootModel[
        constr(pattern=r'[a-z0-9]([-a-z0-9]*[a-z0-9])?', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'[a-z0-9]([-a-z0-9]*[a-z0-9])?', min_length=1, max_length=63)


class ListJobRunsRequest(BaseModel):
    pass


class ListJobTemplatesRequest(BaseModel):
    pass


class ListManagedEndpointsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListVirtualClustersRequest(BaseModel):
    pass


class LogGroupName(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)


class NextToken(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1024)


class ParametricIAMRoleArn(
    RootModel[
        constr(
            pattern=r'(^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$)|([\.\-_\#A-Za-z0-9\$\{\}]+)',
            min_length=4,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'(^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$)|([\.\-_\#A-Za-z0-9\$\{\}]+)',
        min_length=4,
        max_length=2048,
    )


class ParametricReleaseLabel(
    RootModel[
        constr(
            pattern=r'([\.\-_/A-Za-z0-9]+|\$\{[a-zA-Z]\w*\})',
            min_length=1,
            max_length=64,
        )
    ]
):
    root: constr(
        pattern=r'([\.\-_/A-Za-z0-9]+|\$\{[a-zA-Z]\w*\})', min_length=1, max_length=64
    )


class PersistentAppUI(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class ReleaseLabel(
    RootModel[constr(pattern=r'[\.\-_/A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_/A-Za-z0-9]+', min_length=1, max_length=64)


class RequestIdentityUserArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):(iam|sts)::(\d{12})?:[\w/+=,.@-]+$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):(iam|sts)::(\d{12})?:[\w/+=,.@-]+$',
        min_length=20,
        max_length=2048,
    )


class ResourceIdString(
    RootModel[constr(pattern=r'[0-9a-z]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[0-9a-z]+', min_length=1, max_length=64)


class ResourceNameString(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=64)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RetryPolicyConfiguration(BaseModel):
    maxAttempts: JavaInteger


class RetryPolicyExecution(BaseModel):
    currentAttemptCount: JavaInteger


class RsiArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):/virtualclusters/.+$',
            min_length=60,
            max_length=500,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):/virtualclusters/.+$',
        min_length=60,
        max_length=500,
    )


class SparkSqlParameters(RootModel[SecretStr]):
    root: SecretStr


class SparkSubmitParameters(RootModel[SecretStr]):
    root: SecretStr


class StartJobRunResponse(BaseModel):
    arn: Optional[JobArn] = None
    id: Optional[ResourceIdString] = None
    name: Optional[ResourceNameString] = None
    virtualClusterId: Optional[ResourceIdString] = None


class String1024(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1024)


class String128(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class String2048(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=2048)


class String256(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class StringEmpty256(
    RootModel[constr(pattern=r'.*\S.*', min_length=0, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=0, max_length=256)


class SubnetIds(RootModel[List[String256]]):
    root: List[String256]


class TagKeyList(RootModel[List[String128]]):
    root: List[String128] = Field(..., max_length=50, min_length=0)


class TagMap(RootModel[Optional[Dict[str, StringEmpty256]]]):
    root: Optional[Dict[str, StringEmpty256]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class TagResourceResponse(BaseModel):
    pass


class TemplateParameter(
    RootModel[
        constr(pattern=r'[\.\-_/#A-Za-z0-9\$\{\}]+', min_length=1, max_length=512)
    ]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9\$\{\}]+', min_length=1, max_length=512)


class TemplateParameterDataType(Enum):
    NUMBER = 'NUMBER'
    STRING = 'STRING'


class TemplateParameterInputMap(RootModel[Optional[Dict[str, String1024]]]):
    root: Optional[Dict[str, String1024]] = None


class TemplateParameterName(
    RootModel[constr(pattern=r'[\.\-_\#A-Za-z0-9]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\.\-_\#A-Za-z0-9]+', min_length=1, max_length=512)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UriString(
    RootModel[
        constr(
            pattern=r'[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\r\n\t]*',
            min_length=1,
            max_length=10280,
        )
    ]
):
    root: constr(
        pattern=r'[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\r\n\t]*',
        min_length=1,
        max_length=10280,
    )


class ValidationException(RootModel[Any]):
    root: Any


class VirtualClusterArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+$',
            min_length=60,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+$',
        min_length=60,
        max_length=1024,
    )


class VirtualClusterState(Enum):
    RUNNING = 'RUNNING'
    TERMINATING = 'TERMINATING'
    TERMINATED = 'TERMINATED'
    ARRESTED = 'ARRESTED'


class VirtualClusterStates(RootModel[List[VirtualClusterState]]):
    root: List[VirtualClusterState] = Field(..., max_length=10)


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, StringEmpty256] = Field(
        ..., description='The tags assigned to resources.'
    )


class TagKeys(RootModel[List[String128]]):
    root: List[String128] = Field(..., max_length=50, min_length=0)


class States(RootModel[List[VirtualClusterState]]):
    root: List[VirtualClusterState] = Field(..., max_length=10)


class Types(RootModel[List[EndpointType]]):
    root: List[EndpointType] = Field(..., max_length=10)


class States1(RootModel[List[EndpointState]]):
    root: List[EndpointState] = Field(..., max_length=10)


class States2(RootModel[List[JobRunState]]):
    root: List[JobRunState] = Field(..., max_length=10)


class RetryPolicyConfiguration1(BaseModel):
    maxAttempts: Optional[JavaInteger] = None


class CancelJobRunResponse(BaseModel):
    id: Optional[ResourceIdString] = None
    virtualClusterId: Optional[ResourceIdString] = None


class CloudWatchMonitoringConfiguration(BaseModel):
    logGroupName: LogGroupName
    logStreamNamePrefix: Optional[String256] = None


class CreateJobTemplateResponse(BaseModel):
    arn: Optional[JobTemplateArn] = None
    createdAt: Optional[Date] = None
    id: Optional[ResourceIdString] = None
    name: Optional[ResourceNameString] = None


class CreateManagedEndpointResponse(BaseModel):
    arn: Optional[EndpointArn] = None
    id: Optional[ResourceIdString] = None
    name: Optional[ResourceNameString] = None
    virtualClusterId: Optional[ResourceIdString] = None


class CreateVirtualClusterResponse(BaseModel):
    arn: Optional[VirtualClusterArn] = None
    id: Optional[ResourceIdString] = None
    name: Optional[ResourceNameString] = None


class DeleteJobTemplateResponse(BaseModel):
    id: Optional[ResourceIdString] = None


class DeleteManagedEndpointResponse(BaseModel):
    id: Optional[ResourceIdString] = None
    virtualClusterId: Optional[ResourceIdString] = None


class DeleteVirtualClusterResponse(BaseModel):
    id: Optional[ResourceIdString] = None


class EksInfo(BaseModel):
    namespace: Optional[KubernetesNamespace] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class ParametricCloudWatchMonitoringConfiguration(BaseModel):
    logGroupName: Optional[TemplateParameter] = None
    logStreamNamePrefix: Optional[String256] = None


class ParametricS3MonitoringConfiguration(BaseModel):
    logUri: Optional[UriString] = None


class S3MonitoringConfiguration(BaseModel):
    logUri: UriString


class SensitivePropertiesMap(RootModel[Optional[Dict[str, String1024]]]):
    root: Optional[Dict[str, String1024]] = None


class SparkSqlJobDriver(BaseModel):
    entryPoint: Optional[EntryPointPath] = None
    sparkSqlParameters: Optional[SparkSqlParameters] = None


class SparkSubmitJobDriver(BaseModel):
    entryPoint: EntryPointPath
    entryPointArguments: Optional[EntryPointArguments] = None
    sparkSubmitParameters: Optional[SparkSubmitParameters] = None


class TemplateParameterConfiguration(BaseModel):
    defaultValue: Optional[String1024] = None
    type: Optional[TemplateParameterDataType] = None


class TemplateParameterConfigurationMap(
    RootModel[Optional[Dict[str, TemplateParameterConfiguration]]]
):
    root: Optional[Dict[str, TemplateParameterConfiguration]] = None


class JobDriver(BaseModel):
    sparkSqlJobDriver: Optional[SparkSqlJobDriver] = None
    sparkSubmitJobDriver: Optional[SparkSubmitJobDriver] = None


class ContainerInfo(BaseModel):
    eksInfo: Optional[EksInfo] = None


class ContainerProvider(BaseModel):
    id: ClusterId
    info: Optional[ContainerInfo] = None
    type: ContainerProviderType


class CreateVirtualClusterRequest(BaseModel):
    clientToken: ClientToken
    containerProvider: ContainerProvider
    name: ResourceNameString
    tags: Optional[TagMap] = None


class MonitoringConfiguration(BaseModel):
    cloudWatchMonitoringConfiguration: Optional[CloudWatchMonitoringConfiguration] = (
        None
    )
    persistentAppUI: Optional[PersistentAppUI] = None
    s3MonitoringConfiguration: Optional[S3MonitoringConfiguration] = None


class ParametricMonitoringConfiguration(BaseModel):
    cloudWatchMonitoringConfiguration: Optional[
        ParametricCloudWatchMonitoringConfiguration
    ] = None
    persistentAppUI: Optional[TemplateParameter] = None
    s3MonitoringConfiguration: Optional[ParametricS3MonitoringConfiguration] = None


class VirtualCluster(BaseModel):
    arn: Optional[VirtualClusterArn] = None
    containerProvider: Optional[ContainerProvider] = None
    createdAt: Optional[Date] = None
    id: Optional[ResourceIdString] = None
    name: Optional[ResourceNameString] = None
    state: Optional[VirtualClusterState] = None
    tags: Optional[TagMap] = None


class VirtualClusters(RootModel[List[VirtualCluster]]):
    root: List[VirtualCluster]


class ContainerProvider1(BaseModel):
    id: Optional[ClusterId] = None
    info: Optional[ContainerInfo] = None
    type: Optional[ContainerProviderType] = None


class VirtualclustersPostRequest(BaseModel):
    clientToken: constr(pattern=r'.*\S.*', min_length=1, max_length=64) = Field(
        ..., description='The client token of the virtual cluster.'
    )
    containerProvider: ContainerProvider1 = Field(
        ..., description='The information about the container provider.'
    )
    name: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=64) = Field(
        ..., description='The specified name of the virtual cluster.'
    )
    tags: Optional[Dict[str, StringEmpty256]] = Field(
        None, description='The tags assigned to the virtual cluster.'
    )


class DescribeVirtualClusterResponse(BaseModel):
    virtualCluster: Optional[VirtualCluster] = None


class ListVirtualClustersResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    virtualClusters: Optional[VirtualClusters] = None


class Configuration(BaseModel):
    classification: String1024
    configurations: Optional[ConfigurationList] = None
    properties: Optional[Any] = Field(
        None,
        description='A set of properties specified within a configuration classification.',
    )


class ConfigurationList(RootModel[List[Configuration]]):
    root: List[Configuration] = Field(..., max_length=100)


class ConfigurationOverrides(BaseModel):
    applicationConfiguration: Optional[ConfigurationList] = None
    monitoringConfiguration: Optional[MonitoringConfiguration] = None


class CreateJobTemplateRequest(BaseModel):
    clientToken: ClientToken
    jobTemplateData: JobTemplateData
    kmsKeyArn: Optional[KmsKeyArn] = None
    name: ResourceNameString
    tags: Optional[TagMap] = None


class CreateManagedEndpointRequest(BaseModel):
    certificateArn: Optional[ACMCertArn] = None
    clientToken: ClientToken
    configurationOverrides: Optional[ConfigurationOverrides] = None
    executionRoleArn: IAMRoleArn
    name: ResourceNameString
    releaseLabel: ReleaseLabel
    tags: Optional[TagMap] = None
    type: EndpointType


class DescribeJobRunResponse(BaseModel):
    jobRun: Optional[JobRun] = None


class DescribeJobTemplateResponse(BaseModel):
    jobTemplate: Optional[JobTemplate] = None


class DescribeManagedEndpointResponse(BaseModel):
    endpoint: Optional[Endpoint] = None


class Endpoint(BaseModel):
    arn: Optional[EndpointArn] = None
    certificateArn: Optional[ACMCertArn] = None
    certificateAuthority: Optional[Certificate] = None
    configurationOverrides: Optional[ConfigurationOverrides] = None
    createdAt: Optional[Date] = None
    executionRoleArn: Optional[IAMRoleArn] = None
    failureReason: Optional[FailureReason] = None
    id: Optional[ResourceIdString] = None
    name: Optional[ResourceNameString] = None
    releaseLabel: Optional[ReleaseLabel] = None
    securityGroup: Optional[String256] = None
    serverUrl: Optional[UriString] = None
    state: Optional[EndpointState] = None
    stateDetails: Optional[String256] = None
    subnetIds: Optional[SubnetIds] = None
    tags: Optional[TagMap] = None
    type: Optional[EndpointType] = None
    virtualClusterId: Optional[ResourceIdString] = None


class Endpoints(RootModel[List[Endpoint]]):
    root: List[Endpoint]


class JobRun(BaseModel):
    arn: Optional[JobArn] = None
    clientToken: Optional[ClientToken] = None
    configurationOverrides: Optional[ConfigurationOverrides] = None
    createdAt: Optional[Date] = None
    createdBy: Optional[RequestIdentityUserArn] = None
    executionRoleArn: Optional[IAMRoleArn] = None
    failureReason: Optional[FailureReason] = None
    finishedAt: Optional[Date] = None
    id: Optional[ResourceIdString] = None
    jobDriver: Optional[JobDriver] = None
    name: Optional[ResourceNameString] = None
    releaseLabel: Optional[ReleaseLabel] = None
    retryPolicyConfiguration: Optional[RetryPolicyConfiguration] = None
    retryPolicyExecution: Optional[RetryPolicyExecution] = None
    state: Optional[JobRunState] = None
    stateDetails: Optional[String256] = None
    tags: Optional[TagMap] = None
    virtualClusterId: Optional[ResourceIdString] = None


class JobRuns(RootModel[List[JobRun]]):
    root: List[JobRun]


class JobTemplate(BaseModel):
    arn: Optional[JobTemplateArn] = None
    createdAt: Optional[Date] = None
    createdBy: Optional[RequestIdentityUserArn] = None
    decryptionError: Optional[String2048] = None
    id: Optional[ResourceIdString] = None
    jobTemplateData: JobTemplateData
    kmsKeyArn: Optional[KmsKeyArn] = None
    name: Optional[ResourceNameString] = None
    tags: Optional[TagMap] = None


class JobTemplateData(BaseModel):
    configurationOverrides: Optional[ParametricConfigurationOverrides] = None
    executionRoleArn: ParametricIAMRoleArn
    jobDriver: JobDriver
    jobTags: Optional[TagMap] = None
    parameterConfiguration: Optional[TemplateParameterConfigurationMap] = None
    releaseLabel: ParametricReleaseLabel


class JobTemplates(RootModel[List[JobTemplate]]):
    root: List[JobTemplate]


class ListJobRunsResponse(BaseModel):
    jobRuns: Optional[JobRuns] = None
    nextToken: Optional[NextToken] = None


class ListJobTemplatesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    templates: Optional[JobTemplates] = None


class ListManagedEndpointsResponse(BaseModel):
    endpoints: Optional[Endpoints] = None
    nextToken: Optional[NextToken] = None


class ParametricConfigurationOverrides(BaseModel):
    applicationConfiguration: Optional[ConfigurationList] = None
    monitoringConfiguration: Optional[ParametricMonitoringConfiguration] = None


class StartJobRunRequest(BaseModel):
    clientToken: ClientToken
    configurationOverrides: Optional[ConfigurationOverrides] = None
    executionRoleArn: Optional[IAMRoleArn] = None
    jobDriver: Optional[JobDriver] = None
    jobTemplateId: Optional[ResourceIdString] = None
    jobTemplateParameters: Optional[TemplateParameterInputMap] = None
    name: Optional[ResourceNameString] = None
    releaseLabel: Optional[ReleaseLabel] = None
    retryPolicyConfiguration: Optional[RetryPolicyConfiguration] = None
    tags: Optional[TagMap] = None


class JobTemplateData1(BaseModel):
    configurationOverrides: Optional[ParametricConfigurationOverrides] = None
    executionRoleArn: Optional[ParametricIAMRoleArn] = None
    jobDriver: Optional[JobDriver] = None
    jobTags: Optional[TagMap] = None
    parameterConfiguration: Optional[TemplateParameterConfigurationMap] = None
    releaseLabel: Optional[ParametricReleaseLabel] = None


class JobtemplatesPostRequest(BaseModel):
    clientToken: constr(pattern=r'.*\S.*', min_length=1, max_length=64) = Field(
        ..., description='The client token of the job template.'
    )
    jobTemplateData: JobTemplateData1 = Field(
        ...,
        description='The values of StartJobRun API requests used in job runs started using the job template.',
    )
    kmsKeyArn: Optional[
        constr(
            pattern=r'^(arn:(aws[a-zA-Z0-9-]*):kms:([a-zA-Z0-9]+-?)+:(\d{12})?:key\/[(0-9a-zA-Z)-?]+|\$\{[a-zA-Z]\w*\})$',
            min_length=3,
            max_length=2048,
        )
    ] = Field(None, description='The KMS key ARN used to encrypt the job template.')
    name: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=64) = Field(
        ..., description='The specified name of the job template.'
    )
    tags: Optional[Dict[str, StringEmpty256]] = Field(
        None, description='The tags that are associated with the job template.'
    )


class VirtualclustersVirtualClusterIdEndpointsPostRequest(BaseModel):
    certificateArn: Optional[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):acm:.+:(\d{12}):certificate/.+$',
            min_length=44,
            max_length=2048,
        )
    ] = Field(
        None,
        description='The certificate ARN provided by users for the managed endpoint. This field is under deprecation and will be removed in future releases.',
    )
    clientToken: constr(pattern=r'.*\S.*', min_length=1, max_length=64) = Field(
        ..., description='The client idempotency token for this create call.'
    )
    configurationOverrides: Optional[ConfigurationOverrides] = Field(
        None,
        description='A configuration specification to be used to override existing configurations.',
    )
    executionRoleArn: constr(
        pattern=r'^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$',
        min_length=20,
        max_length=2048,
    ) = Field(..., description='The ARN of the execution role.')
    name: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=64) = Field(
        ..., description='The name of the managed endpoint.'
    )
    releaseLabel: constr(pattern=r'[\.\-_/A-Za-z0-9]+', min_length=1, max_length=64) = (
        Field(..., description='The Amazon EMR release version.')
    )
    tags: Optional[Dict[str, StringEmpty256]] = Field(
        None, description='The tags of the managed endpoint. '
    )
    type: constr(pattern=r'.*\S.*', min_length=1, max_length=64) = Field(
        ..., description='The type of the managed endpoint.'
    )


class VirtualclustersVirtualClusterIdJobrunsPostRequest(BaseModel):
    clientToken: constr(pattern=r'.*\S.*', min_length=1, max_length=64) = Field(
        ..., description='The client idempotency token of the job run request. '
    )
    configurationOverrides: Optional[ConfigurationOverrides] = Field(
        None,
        description='A configuration specification to be used to override existing configurations.',
    )
    executionRoleArn: Optional[
        constr(
            pattern=r'^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$',
            min_length=20,
            max_length=2048,
        )
    ] = Field(None, description='The execution role ARN for the job run.')
    jobDriver: Optional[JobDriver] = Field(
        None,
        description='Specify the driver that the job runs on. Exactly one of the two available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.',
    )
    jobTemplateId: Optional[
        constr(pattern=r'[0-9a-z]+', min_length=1, max_length=64)
    ] = Field(None, description='The job template ID to be used to start the job run.')
    jobTemplateParameters: Optional[Dict[str, String1024]] = Field(
        None, description='The values of job template parameters to start a job run.'
    )
    name: Optional[
        constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=64)
    ] = Field(None, description='The name of the job run.')
    releaseLabel: Optional[
        constr(pattern=r'[\.\-_/A-Za-z0-9]+', min_length=1, max_length=64)
    ] = Field(
        None, description='The Amazon EMR release version to use for the job run.'
    )
    retryPolicyConfiguration: Optional[RetryPolicyConfiguration1] = Field(
        None, description='The configuration of the retry policy that the job runs on.'
    )
    tags: Optional[Dict[str, StringEmpty256]] = Field(
        None, description='The tags assigned to job runs.'
    )


Configuration.model_rebuild()
CreateJobTemplateRequest.model_rebuild()
DescribeJobRunResponse.model_rebuild()
DescribeJobTemplateResponse.model_rebuild()
DescribeManagedEndpointResponse.model_rebuild()
JobTemplate.model_rebuild()
JobTemplateData.model_rebuild()
